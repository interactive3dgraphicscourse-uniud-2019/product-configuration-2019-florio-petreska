head
	link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css") 
	link(rel="stylesheet", href="./css/main.css")
	script(src="./js/lib/three.min.js")
	script(src="./js/lib/stats.min.js")
	script(src="./js/lib/OrbitControls.js")
	script(src="./js/lib/LoaderSupport.js")
	script(src="./js/lib/OBJLoader2.js")
	script(src="./js/lib/RGBELoader.js")
	script(src="./js/lib/HDRCubeTextureLoader.js")
	script(src="./js/lib/BufferGeometryUtils.js")
body
	script(type="text/x-glsl", id="vertex-textures").
		attribute vec4 tangent;
		varying vec3 vNormal;
		varying vec3 vPosition;
		varying vec3 wPosition;
		varying vec2 uVv;
		varying vec3 vTangent;
		varying vec3 vBitangent;
		
		void main() {
			vec4 vPos = modelViewMatrix * vec4( position, 1.0 );
			vPosition = vPos.xyz;
			wPosition = (modelMatrix * vec4( position, 1.0 )).xyz;
			vNormal = normalMatrix * normal;
			vec3 objectTangent = vec3( tangent.xyz );
			vec3 transformedTangent = normalMatrix * objectTangent;
			vTangent = normalize( transformedTangent );
			vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
			uVv = uv; // uv variabile pre calcolata dal software (derivata dal modello)
			gl_Position = projectionMatrix * vPos;

		}

	script(type="text/x-glsl", id="fragment").
		varying vec3 vNormal;
		varying vec3 vPosition;
		varying vec3 wPosition;
		uniform vec3 pointLightsPosition[3]; // in world space
		uniform vec3 clight;
		uniform vec3 c;
		uniform float metalness;
		uniform float roughness;
		uniform samplerCube envMap;
		uniform vec3 ambientLight;
		const float PI = 3.14159;
		const int numberOfLights = 3;
		vec3 fresnel;

		vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
				return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
			}

		vec3 FSchlick(float lDoth) {
			return (vec3(max(metalness, 0.04))*c + (vec3(1.0)-vec3(max(metalness, 0.04))*c)*pow(1.0 - lDoth,5.0));
		}
		float DGGX(float nDoth, float alpha) {
			float alpha2 = alpha*alpha;
			float d = nDoth*nDoth*(alpha2-1.0)+1.0;
			return (  alpha2 / (PI*d*d));
		}
		float G1(float dotProduct, float k) {
			return (dotProduct / (dotProduct*(1.0-k) + k) );
		}
		float GSmith(float nDotv, float nDotl) {
				float k = roughness*roughness;
				return G1(nDotl,k)*G1(nDotv,k);
		}


		void main() {
			vec3 n = normalize( vNormal );  // interpolation destroys normalization, so we have to normalize
			vec3 sumFresnel = vec3(0.0);
			vec3 outRadiance[numberOfLights];
			for(int i=0; i<numberOfLights; i++) {
				vec4 lPosition = viewMatrix * vec4( pointLightsPosition[i], 1.0 );
				vec3 l = normalize(lPosition.xyz - vPosition.xyz);	
				vec3 v = normalize( -vPosition);
				vec3 h = normalize( v + l);
				// small quantity to prevent divisions by 0
				float nDotl = max(dot( n, l ),0.000001);
				float lDoth = max(dot( l, h ),0.000001);
				float nDoth = max(dot( n, h ),0.000001);
				float vDoth = max(dot( v, h ),0.000001);
				float nDotv = max(dot( n, v ),0.000001);
				fresnel = FSchlick(lDoth);
				sumFresnel += fresnel;
				vec3 BRDF = vec3(1.0-metalness)*c/PI + fresnel*GSmith(nDotv,nDotl)*DGGX(nDoth,roughness*roughness) / (4.0*nDotl*nDotv);
				outRadiance[i] = PI* clight * nDotl * BRDF;
			}

			vec3 outRadianceF;
			for(int i=0; i<numberOfLights; i++) {
				outRadianceF = outRadianceF + outRadiance[i];
			}

			vec3 worldN = inverseTransformDirection( n, viewMatrix ); // normale in view space traslata per la view matrix
			vec3 worldV = cameraPosition - wPosition ; 
			vec3 r = normalize( reflect(-worldV,worldN));
			vec3 envLight = textureCube( envMap, vec3(-r.x, r.yz)).rgb;
			envLight = pow( envLight, vec3(2.2));
			
			outRadianceF = outRadianceF + vec3(1.0-roughness)*sumFresnel/vec3(numberOfLights)*(normalize(envLight)) + ambientLight * c;

			// gamma encode the final value
			gl_FragColor = vec4(pow( outRadianceF, vec3(1.0/2.2)), 1.0);
		}



	script(type="text/x-glsl", id="fragment-doublematerial").
		varying vec3 vNormal;
			varying vec3 vPosition;
			varying vec3 wPosition;
			varying vec2 uVv;
			varying vec3 vTangent;
			varying vec3 vBitangent;
			uniform vec3 pointLightsPosition[3]; // in world space
			uniform vec3 clight;
			
			// parametri materiale A
			uniform vec3 c;
			uniform float aMetalness;
			uniform float aRoughness;
			
			// immagini materiale B
			uniform sampler2D specularMap;
			uniform sampler2D diffuseMap;
			uniform sampler2D roughnessMap;
			uniform sampler2D normalMap;
			uniform vec2 textureRepeat; // valore del repeat in 2D

			// immagine alpha
			uniform sampler2D alphaMap;

			uniform sampler2D aoMap;
			uniform samplerCube envMap;
			uniform vec3 ambientLight;

			vec3 metalness;
			const float PI = 3.14159;
			const int numberOfLights = 3;
			vec3 cdiff;
			vec3 cspec;
			float roughness;
			vec3 FSchlick(float lDoth) {
				return (cspec + (vec3(1.0)-cspec)*pow(1.0 - lDoth,5.0));
			}

			vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
				return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
			}

			float DGGX(float nDoth, float alpha) {
				float alpha2 = alpha*alpha;
				float d = nDoth*nDoth*(alpha2-1.0)+1.0;
				return (  alpha2 / (PI*d*d));
			}
			float G1(float dotProduct, float k) {
				return (dotProduct / (dotProduct*(1.0-k) + k) );
			}
			float GSmith(float nDotv, float nDotl) {
					float k = roughness*roughness;
					return G1(nDotl,k)*G1(nDotv,k);
			}
			void main() {
				vec3 outRadiance[numberOfLights];
				vec3 outRadianceF;
				vec3 mapN;

				vec3 normal = normalize( vNormal );
				vec3 tangent = normalize( vTangent );
				vec3 bitangent = normalize( vBitangent );
				mat3 vTBN = mat3( tangent, bitangent, normal );
				
				float alpha = texture2D( alphaMap, uVv ).r;
				if(alpha < .9) {
					cdiff = c;
					metalness = vec3(aMetalness);
					roughness = aRoughness;
					mapN = normal;
				} else {
					cdiff = texture2D( diffuseMap, uVv*textureRepeat ).rgb; // uVv*textureRepeat: prendo il punto corretto
					metalness = pow(texture2D( specularMap, uVv*textureRepeat ).rgb, vec3(2.2));
					roughness = texture2D( roughnessMap, uVv*textureRepeat).r; // no need to linearize roughness map
					mapN = texture2D( normalMap, uVv * textureRepeat ).xyz * 2.0 - 1.0; // inverso di +1; /2, prendo il valore corretto della normal map
				}

				//mapN.xy = normalScale * mapN.xy; // contributo della perturbazione (quanto influisce sulla normale)
				vec3 n = normalize( vTBN * mapN );

				

				vec3 sumFresnel = vec3(0.0);
				
				
				
				for(int i=0; i<numberOfLights; i++) {
					
					vec4 lPosition = viewMatrix * vec4( pointLightsPosition[i], 1.0 );	
					vec3 l = normalize(lPosition.xyz - vPosition.xyz);
					//vec3 n = normalize( vNormal );  // interpolation destroys normalization, so we have to normalize
					vec3 v = normalize( -vPosition);
					vec3 h = normalize( v + l);
					// small quantity to prevent divisions by 0
					float nDotl = max(dot( n, l ),0.000001);
					float lDoth = max(dot( l, h ),0.000001);
					float nDoth = max(dot( n, h ),0.000001);
					float vDoth = max(dot( v, h ),0.000001);
					float nDotv = max(dot( n, v ),0.000001);
					// texture in sRGB, linearize
					cdiff = pow( cdiff, vec3(2.2));
					//cspec = texture2D( specularMap, uVv*textureRepeat ).rgb * cdiff;
					// texture in sRGB, linearize
					//cspec = pow( cspec, vec3(2.2)) * cdiff;
					cspec = metalness * cdiff;
					
					vec3 fresnel = FSchlick(lDoth);
					sumFresnel += fresnel;
					vec3 BRDF = (vec3(1.0)-metalness)*cdiff/PI + fresnel*GSmith(nDotv,nDotl)*DGGX(nDoth,roughness*roughness)/
						(4.0*nDotl*nDotv);
					outRadiance[i] = PI* clight * nDotl * BRDF;
				}

				vec3 worldN = inverseTransformDirection( n, viewMatrix ); // normale in view space traslata per la view matrix
				vec3 worldV = cameraPosition - wPosition ; 
				vec3 r = normalize( reflect(-worldV,worldN));
				vec3 envLight = textureCube( envMap, vec3(-r.x, r.yz)).rgb;
				envLight = pow( envLight, vec3(2.2));
				
				for(int i=0; i<numberOfLights; i++) {
				 	outRadianceF = outRadianceF + outRadiance[i];
				 }

				outRadianceF = outRadianceF + vec3(1.0-roughness)*sumFresnel/vec3(numberOfLights)*envLight + ambientLight*cdiff*texture2D( aoMap, uVv*textureRepeat ).xyz;
				

				// gamma encode the final value
				gl_FragColor = vec4(pow( outRadianceF, vec3(1.0/2.2)), 1.0);	
			}
	.navbar-fixed
		nav
			.nav-wrapper
				a.brand-logo(href='#!')
					img.responsive-img(src="./images/logo.png", alt="ACME")
				ul.right.hide-on-med-and-down
					li
						a(href='#') About
					li
						a(href='#') Shop
					li
						a(href="#") Help
					li
						a.btn Shopping Cart
	.main
		.row.configurator   
			.row.title
				.pad
					h3 ACMEpad
				.reviews
					h6 5 Reviews 
						<span class="fa fa-star checked" style="color:gold"></span>
						<span class="fa fa-star checked" style="color:gold"></span>
						<span class="fa fa-star checked" style="color:gold"></span>
						<span class="fa fa-star checked" style="color:gold"></span>
						<span class="fa fa-star-half-full" style="color:gold"></span>

			.col.l8.m12.object
				#threejs-container
				
			.col.l4.m12.prop
				.row.prop-title.front
					h6 FRONT 
						span Black
				.row.prop-images(target="front")
					.col.s3.selection.active(data-value ="f-01")
						img.responsive-img(src="./images/f-01.png", alt="Black")
					.col.s3.selection(data-value ="f-02")
						img.responsive-img(src="./images/f-02.png", alt="White")
					.col.s3.selection(data-value ="f-03")
						img.responsive-img(src="./images/f-03.png", alt="Matte Black")
				.row.prop-title.back
					h6 BACK 
						span Silver
				.row.prop-images(target="back")
					.col.s3.selection.active(data-value ="b-01")
						img.responsive-img(src="./images/b-01.png", alt="Silver")
					.col.s3.selection(data-value ="b-02")
						img.responsive-img(src="./images/b-02.png", alt="ACME Cotton")
					.col.s3.selection(data-value ="b-03")
						img.responsive-img(src="./images/b-03.png", alt="Ancient Gold")
				.row.prop-text
					p Extraordinary performance, personalised design and immersive display, all packed together in ACMEpad that follows your own style.
					p With its battery capacity of 36.71Wh that lasts up to 15 hours, you can enjoy playing your augmented reality games on-the-go, thanks to the A12X Bionic chip.
					p Take it everywhere you go and show everybody your ultra lightweight, personalised ACMEpad.
				.row.cart.valign-wrapper
					.col.s6
						h5.price $1200
					.col.s6
						a.btn Add to cart
	script(src="./js/Tablet.js")
	script(src="./js/main.js")